/*
Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.  */

 void rever(vector<char> &v, int t){
            if(t==0)return ; 
            rever(v, t/10);
            char x = char(t%10+'0');
            v.push_back(x); 
    }
    int compress(vector<char>& chars) {
        int n= chars.size();
        map<char,int> m; 
        for(int i=0;i<n;i++){
            m[chars[i]]++; 
        }
        vector<char> v; 
        for(auto ele : m){
            if(ele.second==1) v.push_back(ele.first);
            else {
                v.push_back(ele.first);
                int t = ele.second; 
                rever(v, t);
            }
        }
        chars = v; 
        return v.size();
    }
